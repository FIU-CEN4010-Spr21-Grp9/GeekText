// This code is untested, i'll have to check it later. Also, sorry for the mess I can fix it up later as well. This first class isn't even finished.

import java.util.*;

public class createUser {
    String userName;
    String userNickname;
    String userStreet;
    String userCity;
    String userState;
    String userFirstName;
    String userLastName;
    char userMiddleInitial;
    int userZipCode;

    Scanner scnr = new Scanner(System.in);

    public createUser(String userName, String first, String last,
                      String nickName, String street,
                      String state, String city,
                      int zip, char middle)
    {
        setUserName(userName);
        setUserFirstName(first);
        setUserMiddleInitial(middle);
        setUserLastName(last);
        setUserNickname(nickName);
        setUserCity(city);
        setUserState(state);
        setUserStreet(street);
        setUserZipCode(zip);

    }

    private void setUserName (String name) { userName = name; } // will be used as a user key

    private void setUserNickname (String nickname) { userNickname = nickname; }

    private void setUserCity (String city) { userCity = city; } // drop down list

    private void setUserState (String state) { userState = state; } // drop down

    private void setUserZipCode (int zip)
    {
        if (checkZipCode(zip))
            userZipCode = zip;
    }

    private void setUserStreet (String street)
    {
        if (checkUserStreet(street))
            userStreet = street;
    }

    private void setUserMiddleInitial (char m)
    {
        if (checkMiddleInitial(m));
            userMiddleInitial = m;
    }

    private void setUserFirstName (String first)
    {
        if (checkFirstName(first))
            userFirstName = first;
    }

    private void setUserLastName (String last)
    {
        if (checkLastName(last))
            userLastName = last;
    }

    public String getUserState () { return userState; }

    public String getUserName() { return userName; }

    public String getUserNickname () { return userNickname; }

    public String getUserStreet () { return userStreet; }

    public String getUserCity () { return userCity; }

    public int getUserZipCode () { return userZipCode; }

    // Checks if first name consists of only letters
    private boolean checkFirstName (String first)
    {
        boolean lettersOnly;
        lettersOnly = first.matches("^[a-zA-Z]*$");
        if (!lettersOnly)
        {
            System.out.println("Please, enter a valid last name.");
            checkFirstName(scnr.next());
        }
        return true;
    }

    // Checks if last name consists of only letters
    private boolean checkLastName (String last)
    {
        boolean lettersOnly;
        lettersOnly = last.matches("^[a-zA-Z]*$");
        if (!lettersOnly)
        {
            System.out.println("Please, enter a valid last name.");
            checkLastName(scnr.next());
        }
        return true;
    }

    // Checks if the middle initial is a letter
    private boolean checkMiddleInitial (char m)
    {
        boolean letter;
        letter = String.valueOf(m).matches("^[a-zA-Z]*$");
        if (!letter)
        {
            System.out.println("Please, enter a valid middle initial.");
            checkMiddleInitial(scnr.next().charAt(0));
        }
        return true;
    }

    // does not actually check for valid zipcodes, just the correct format
    private boolean checkZipCode (int zip)
    {
        // Checks if input is an int
            String zipS = String.valueOf(zip);
            try {
                int dateValidation = Integer.parseInt(zipS);
            } catch (NumberFormatException e) {
                System.out.println("Enter a valid expiration date.");
                checkZipCode(scnr.nextInt());
            }
            // Checks the length of the date, it should only be 4 digits.
            int digits = zipS.length();
            if (digits != 4)
            {
                System.out.println("Please, enter a valid expiration date.");
                checkZipCode(scnr.nextInt());
            }

            return true;
    }

    private boolean checkUserStreet (String street)
    {
        boolean lettersAndNumbers;
        lettersAndNumbers = street.matches("^[a-zA-Z0-9]+$");
        if (!lettersAndNumbers)
        {
            System.out.println("Please, enter a valid street.");
            checkUserStreet(scnr.next());
        }
        return true;
    }
}


/*




        NEXT CLASS
        
        
        
*/

import java.util.*;

public class createAccount {

    String accountUserName;
    String accountPassword;
    String accountEmail;

    Scanner scnr = new Scanner(System.in);

    public createAccount (String email, String userName, String password)
    {
        setAccountEmail(email);
        setAccountUserName(userName);
        setAccountPassword(password);
    }

    public String getAccountEmail () { return accountEmail; }

    public String getAccountPassword () { return accountPassword; }

    private void setAccountUserName (String userName) // acts as the key
    {
        accountUserName = userName;
    }

    private void setAccountEmail (String email)
    {
        if (checkEmail(email))
            accountEmail = email;
    }

    private void setAccountPassword (String password)
    {
        if (checkPassword(password))
            accountPassword = password;
    }

    // Password must contain at least 2 special characters and 2 capital letters.
    private boolean checkPassword (String pass) {
        boolean specialChars;
        int i = 0;
        int specialCounter = 0;
        int capitalCounter = 0;
        while (i <= accountPassword.length()) {
            if (!String.valueOf(accountPassword.charAt(i)).matches("^[a-zA-Z]*$")) ;
            specialCounter++;
            if (Character.isUpperCase(accountPassword.charAt(i)))
                capitalCounter++;
            i++;
        }
        if (specialCounter < 2)
        {
            System.out.println("Please, 2 or more special characters.");
            checkPassword(scnr.next());
        }

        if (capitalCounter < 2)
        {
            System.out.println("Please, 2 or more capital letters.");
            checkPassword(scnr.next());
        }
        return true;
    }

        // checks if email contains an '@' and '.com'
        private boolean checkEmail(String email)
        {
            if (!email.contains("@") && !email.contains(".com"))
            {
                System.out.println("Please, enter a valid email.");
                checkEmail(scnr.next());
            }
            return true;
        }
}
