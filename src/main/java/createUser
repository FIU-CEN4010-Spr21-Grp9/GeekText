import java.util.*;

public class createUser {
    String userName;
    String userNickname;
    String userStreet;
    String userCity;
    String userState;
    String userFirstName;
    String userLastName;
    char userMiddleInitial;
    int userZipCode;
    long userID;

    createAccount account;
    createPayment payment;
    Scanner scnr = new Scanner(System.in);

    public createUser(long id) throws Exception {
        userID = id;

        setUserFirstName();

        setUserMiddleInitial();

        setUserLastName();

        setUserNickname();
        // set data to database
        // joptionpane would u like 2 continue and add your payment? if no, then go to home. if yes:
        // payment = new createPayment(id);
        System.out.println("You're done creating your account! See you soon, " + userFirstName + ".");
    }

    private void setUserName (String name) { userName = name; }

    private void setUserCity (String city) { userCity = city; } // drop down list

    private void setUserState (String state) { userState = state; } // drop down

    private void setUserZipCode (int zip)
    {
        if (checkZipCode(zip))
            userZipCode = zip;
    }

    private void setUserStreet (String street)
    {
        if (checkUserStreet(street))
            userStreet = street;
    }

    private void setUserNickname ()
    {
        System.out.println("Enter a nickname if you'd like to use one: ");
        try
        {
            userNickname = scnr.next();
        } catch (Exception e) {
            System.out.println("Error when setting user nickname.");
            e.printStackTrace();
        }

    }

    private void setUserMiddleInitial ()
    {
        System.out.println("Enter your middle initial if applicable: ");
        try
        {
            char m = scnr.next().toUpperCase().charAt(0);
            if (checkMiddleInitial(m));
            userMiddleInitial = m;
        } catch (Exception e) {
            System.out.println("Error when setting middle initial.");
            e.printStackTrace();
        }

    }

    private void setUserFirstName () throws Exception
    {
        System.out.println("What is your first name?");
        try
        {
            String first = scnr.next();
            if (checkFirstName(first))
                userFirstName = first;
        } catch (Exception e) {
            System.out.println("Error when setting the first name.");
            e.printStackTrace();
        }

    }

    private void setUserLastName ()
    {
        System.out.println("Enter last name.");
        try
        {
            String last = scnr.next();
            if (checkLastName(last))
                userLastName = last;
        } catch (Exception e) {
            System.out.println("Error when setting last name.");
            e.printStackTrace();
        }
    }

    public String getUserState () { return userState; } /////

    public String getUserName() { return userName; }

    public String getUserNickname () { return userNickname; } ///////

    public String getUserStreet () { return userStreet; }

    public String getUserCity () { return userCity; }

    public int getUserZipCode () { return userZipCode; }

    // Checks if first name consists of only letters
    private boolean checkFirstName (String first)
    {
        boolean lettersOnly;
        lettersOnly = first.matches("^[a-zA-Z]*$");
        if (!lettersOnly)
        {
            System.out.println("Please, enter a valid first name.");
            checkFirstName(scnr.next());
        }
        return true;
    }

    // Checks if last name consists of only letters
    private boolean checkLastName (String last)
    {
        boolean lettersOnly;
        lettersOnly = last.matches("^[a-zA-Z]*$");
        if (!lettersOnly)
        {
            System.out.println("Please, enter a valid last name.");
            checkLastName(scnr.next());
        }
        return true;
    }

    // Checks if the middle initial is a letter
    private boolean checkMiddleInitial (char m)
    {
        boolean letter;
        letter = String.valueOf(m).matches("^[a-zA-Z]*$");
        if (!letter)
        {
            System.out.println("Please, enter a valid middle initial.");
            checkMiddleInitial(scnr.next().charAt(0));
        }
        return true;
    }

    // does not actually check for valid zipcodes, just the correct format
    private boolean checkZipCode (int zip)
    {
        // Checks if input is an int
        String zipS = String.valueOf(zip);
        try {
            int dateValidation = Integer.parseInt(zipS);
        } catch (NumberFormatException e) {
            System.out.println("Enter a valid expiration date.");
            checkZipCode(scnr.nextInt());
        }
        // Checks the length of the date, it should only be 4 digits.
        int digits = zipS.length();
        if (digits != 4)
        {
            System.out.println("Please, enter a valid expiration date.");
            checkZipCode(scnr.nextInt());
        }

        return true;
    }

    private boolean checkUserStreet (String street)
    {
        boolean lettersAndNumbers;
        lettersAndNumbers = street.matches("^[a-zA-Z0-9]+$");
        if (!lettersAndNumbers)
        {
            System.out.println("Please, enter a valid street.");
            checkUserStreet(scnr.next());
        }
        return true;
    }
}
